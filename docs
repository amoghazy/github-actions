## Core Components in GitHub Actions

1. Workflows:

- YAML files in .github/workflows
- Define automated processes
- Triggered by events

2. Events:

- Repository activities that trigger workflows
- Push, pull request, issue creation, etc.
- Manual triggers (workflow_dispatch)

3. Jobs:

- Groups of steps that run on same runner
- Can run in parallel or sequential order
- Share data using artifacts

4. Steps:

- Individual tasks within jobs
- Run commands or actions
- Access shared workspace

5. Actions:

- Reusable workflow components
- Custom code execution
- Available in Marketplace

6. Runners:

- Servers that execute workflows
- GitHub-hosted or self-hosted
- Different OS environments

7. Artifacts:

- Files produced during workflow runs
- Shared between jobs
- Stored for later access

# --------------------------------------------------------------------------------

Actions in GitHub Actions are reusable automation components that designed to perform specific tasks or operations. They are the building blocks of your automation workflows. Actions can be written in various programming languages and packaged into reusable components.

Key aspects of actions:

1. Reusable units of code:

- Can be created by anyone
- Shared and reused across workflows
- Available in GitHub Marketplace

2. Types of actions:

- Docker container actions
- JavaScript actions
- Composite run steps actions

3. Common uses:

- Setting up build environments
- Running test suites
- Publishing packages
- Deploying to cloud services
- Automating code reviews
- Managing issues/PRs

4. Example action syntax:

steps:

- uses: actions/checkout@v3
- uses: actions/setup-node@v3
  with:
  node-version: '14'

5. Key features:

- Input/output parameters
- Environment variable access
- Workspace file system access
- GitHub API integration
- Error handling and logging

---

<!-- Actions -->

when use actions in github actions it downloads to the runner first and then execute it.
--> "Checkout" action is used to clone the repository to the runner.

// To run multiple commands
use pipe
run: |
echo "Starting multi-line script"
echo "Line 1"

use third party library like cowsay
must install it first
and if u want to disable workflow can make it in github and disable it.

---

###multiple jobs
we can run multiple jobs in parallel or sequentially.
default is to run in parallel.
how to run in sequence?
use needs:
needs: [build, test] or needs: build
take the name of the job.
=----------
because of every job i running in different runner, we can't share data between jobs.
so we use artifact to share data between jobs.
use actions artifact upload and actions artifact download
store in github for 90 days.by default.

---

in github actions we can use environment variables to store sensitive data like password, api key, etc.
we can use environment variables at different levels like job, workflow, repository, steps etc.

## steps

every step add env property
env:
USER: "GITHUB_USER"
run: echo $USER # another way to use env variable is ${{ env.USER }}

<!-- we use in the same step -->

this is not efficient way to use env variable.

---

## at job level

add env property to job

jobs:
build:
env:
USER: "GITHUB_USER"
steps: - run: echo $USER

## <!-- but this is not efficient way to use env variable also because we have to add env property to every job. -->

## at workflow level

on: push
env:
USER: "GITHUB_USER"
jobs:

in env variable the password or sensitive data is stored in plain text.
so we can use secrets to store sensitive data.

<!-- #### secrets ####-->

secrets are stored in github.
can uses in level of repository, organization, user.

## <!-- #### secrets ####-->

can use secrets in env variable. and access it at repo level if u need to use it in multiple workflows.

to add secret we make new secret in github.
secret is stored in encrypted form.

to use secret ${{ secrets.SECRET_NAME }}
to use repository Variables {{vars.VAR_NAME}}

---

#### Events Triggering Workflows

## on:

## push:

schedule:

- ## cron: "_/15 _ \* \* \* " # every 15 minutes at least

---

to run manually
workflow_dispatch:

---

#### Concurrency

Concurrency in GitHub Actions allows you to manage and control parallel job execution.

concurrency:
group: ${{ github.workflow }}-${{ github.ref }} # <group name>
cancel-in-progress: true # cancels in-progress jobs or runs in the same concurrency group
if false, it will run jobs not cancel them but after the job is done it will run the next job.

# Example usage in a workflow:

name: Build
on: push
concurrency:
group: build-${{ github.ref }}
cancel-in-progress: true
jobs:
build:
runs-on: ubuntu-latest
steps: - uses: actions/checkout@v2

# Benefits:

# - Prevents simultaneous deployments

# - Saves resources by cancelling redundant runs

# - Ensures sequential execution when needed

# - Useful for deployment jobs to prevent conflicts

# Can be specified at:

# - Workflow level

# - Job level

# - Using different group names for different concurrency requirements

---

### Timeouts

allow you to set a maximum duration for a job or step to run.
add this option to job or step

### timeout-minutes: < number of minutes>

# - Can be set at:

# - Workflow level

# - Job level

# - Step level

++++++++++++++++++++++++++++++++++++++++++++++++==

## MATRIX ### ---------------------------------------

# - Allows running a job multiple times with different configurations

<!-- can use same job to run in diff OS or diff versions of node.js or diff versions of os -->

we can use this strategy

<!-- jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [14.x, 16.x, 18.x]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
-->
